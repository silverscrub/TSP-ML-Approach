library("TSP")
library("TSP")
 ## Write and read data in TSPLIB format
 pts  <- data.frame(x=100*runif(30), y=100*runif(30))
## create TSP, ATSP and ETSP (2D)
etsp <- ETSP(pts)
write_TSPLIB(etsp, file="./main_case.tsp")
write_TSPLIB(etsp, file="./main/case.tsp")
set()
install.packages("sets")
set()
library("sets")
set()
a <- set(1,2)
a
b <- 3
set_union(a,b)
a <- set()
b <- c(1,2,3)
set_union(a,b)
b <- tuple(1,2,3)
set_union(a,b)
dataTSP <- read_TSPLIB("/home/LC/mailo01/TSP-ML-Approach/src/R/CLUSTER_DIV/main.tsp")
points <- set()
diff <- length(dataTSP)/2
for (i in 1:diff){
    set_union( points, tuple(i, dataTSP[i], dataTSP[i+diff]))
}
print(points)
for (i in 1:diff){print(tuple(i, dataTSP[i], dataTSP[i+diff]))}
print(points)
for (i in 1:diff){set_union(points,set(tuple(i, dataTSP[i], dataTSP[i+diff])))}
print(points)
a <- set
points <- set()
points
set_union(points, tuple(1,2,3))
points
for (i in 1:diff){points <- set_union(points,set(tuple(i, dataTSP[i], dataTSP[i+diff])))}
points
library(has)
library(hash)
install.packages(hash)
install.packages("hash")
library(hash)
h <- hash()
library("math")
sqrt(4)
points <-hash
points <-hash()
points
diff <- length(dataTSP)/2
for (i in 1:diff){
    points[[i]] <- tuple(i, dataTSP[i], dataTSP[i+diff])
}
for (i in 1:diff){points[[i]] <- tuple(dataTSP[i], dataTSP[i+diff])}
for (i in 1:diff){points[[toString(i)]] <- tuple(i, dataTSP[i], dataTSP[i+diff])}
points
points["1"]
points["2"]
var <- 1:100
ls
var
c(1:100)
list(1:100)
vec <- c(1:100)
vec[1]
vec[20]
set(1:20)
setTest <- set(1:20)
setTest[1]
setTest[2]
setTest
c(rep(0,20))
b <- set(set())
b
a <- set(1,2,3)
set_union(b,a)
a <- set(set(1,2,3))
set_union(b,a)
b
set
set_combn(b,a)
set_combn(b,3)
set_combn(b,1)
set_combn(b,2)
snamed <- set(one = 1, 2, three = 3)
snamed
snamed[["one"]]
a <- list()
a
a <- []
quit
q()
a <- list(1,2,35)
a
a <- list()
a
points
print(points())
points
mylist <- c(c())
mylist
append(mylist, c(1,3,5))
modified <- append(mylist, c(1,3,5))
modified
modified <- append(mylist, c(c(1,3,5)))
modified
tree <- set(set))
tree <- set(set())
library("sets")
tree <- set(set())
tree
append(tree,1)
tree <- set(set())
append(tree,set(1))
tree <- set(set())
tree
append(tree,set(set(1))
da
append(tree,set(set(1))
)
tree <- set(set())
tree
tree[[1]]
tree[["1"]]
tree
tree2 <-set()
tree2
append(tree2, set(set(2,4,6)))
library("TSP")
library("sets")
library("hash")
dataTSP <- read_TSPLIB("/home/LC/mailo01/TSP-ML-Approach/src/R/CLUSTER_DIV/main.tsp")
points <- hash()
noPts <- length(dataTSP)/2
for (i in 1:noPts){
    points[[toString(i)]] <- tuple(dataTSP[i], dataTSP[i+diff])
}
points[["1]]
points[["1"]]
points[["1"]]
points[["2"]]
empty <- c()
length(empty)
x <- c(1:30)
x
x[-3]
x
x <- x[-3]
x
x <- c(1:100000)
x <- x[-50000]
x
tree <- set(set(2,5,7),set(10,3,9),set(1,4,6,8))
tree
tree[[1]]
tree <- list(list(2,5,7),list(10,3,9),list(1,4,6,8))
tree[[1]]
tree[]]
tree[]
tree
append(tree,list(list(11,12,13)))
checklist
checklist <- c(1:100)
checklist[[1]]
checklist[[20]]
quit()
dataTSP <- read_TSPLIB("/home/LC/mailo01/TSP-ML-Approach/src/R/CLUSTER_DIV/main.tsp")
points <- hash()
noPts <- length(dataTSP)/2
for (i in 1:noPts){
    points[[toString(i)]] <- tuple(dataTSP[i], dataTSP[i+diff])
}
dist_pts() <- function(int1,int2){
        return(sqrt(int1^2 + int2^2))
}
print(points)
## default radius, dynamic radius finding will be implemented later
radius <- 5
current_tree <- list()
checklist <- c(1:noPts)
startPt <- checklist[[1]]
quit()
